# Default parameter values.
parameters:
  dependsOn: []
  poolName: ''
  environment: 'Dev'
  deploymentName:
  terraformVersion: '1.1.4'
  tf_log_level: error
  artifactSuffix: $(Build.BuildNumber)
  knownHosts:
  sshPublicKey:
  sshPassphrase:
  sshSecureFile:
  sp_client_id:
  sp_client_secret:
  tenant_id:
  subscription_id:
  #tfConfigDirectory: 'tf-deploy'
  workingDirectory: 'tf-deploy'
  tfvarsPath: ../environments/Dev/environment.tfvars
  backendPath: ../environments/Dev/backend.tf
  buildType: current
  downloadType: single
  downloadPath: '$(System.ArtifactsDirectory)'

stages:
- stage: 'TerraformPlan_${{ parameters.environment }}_${{ parameters.deploymentName }}'
  dependsOn: ${{ parameters.dependsOn }}
  ${{ if ne(parameters.poolName, '') }}:
    pool:
      name: ${{ parameters.poolName}}
  ${{ else }}:
    pool:
      vmImage: windows-latest
  jobs:
  - job: TerraformPlan
    continueOnError: false
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: ${{ parameters.knownHosts }}
        sshPublicKey: ${{ parameters.sshPublicKey }}
        sshPassphrase: ${{ parameters.sshPassphrase }}
        sshKeySecureFile: ${{ parameters.sshSecureFile }}

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0 #TerraformInstaller@0
      displayName: 'install Terraform'
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        terraformVersion: ${{ parameters.terraformVersion }}

    - task: CmdLine@2
      displayName: "Initialise Terraform deployment"
      env:
        ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
        ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
        ARM_TENANT_ID:       ${{ parameters.tenant_id }}
      inputs:
          workingDirectory: ${{ parameters.workingDirectory }}
          script: |
            terraform init -upgrade -var-file=${{ parameters.tfvarsPath }} -backend-config=${{ parameters.backendPath }}

    - task: TerraformCLI@0
      name: TerraformPlan
      env:
        ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
        ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
        ARM_TENANT_ID:       ${{ parameters.tenant_id }}
        TF_LOG:              ${{ parameters.tf_log_level }}
      inputs:
        command: 'plan'
        workingDirectory: ${{ parameters.workingDirectory }}
        commandOptions: '-var-file=${{ parameters.tfvarsPath }} -out=${{ parameters.environment }}-${{ parameters.deploymentName }}-$(Build.BuildNumber).tfplan -compact-warnings -detailed-exitcode -input=false'
        publishPlanResults: '${{ parameters.environment }}-${{ parameters.deploymentName }}-$(Build.BuildNumber)-plan'

    - task: PowerShell@2
      name: checkChanges
      displayName: 'Check the tfplan file for any changes to the deployment.'
      env:
        ARM_CLIENT_ID:       ${{ parameters.sp_client_id }}
        ARM_CLIENT_SECRET:   ${{ parameters.sp_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ parameters.subscription_id }}
        ARM_TENANT_ID:       ${{ parameters.tenant_id }}
        OUTPUT: ${{ parameters.environment }}-${{ parameters.deploymentName }}-$(Build.BuildNumber).tfplan #${{ parameters.deploymentName }}-${{ parameters.artifactName }}
        tfvarsPath: ${{ parameters.tfvarsPath }}
        backendPath: ${{ parameters.backendPath }}
      inputs:
        pwsh: true
        workingDirectory: ${{ parameters.workingDirectory }}
        targetType: 'inline'
        script: |
            New-Item -ItemType "directory" -Path $(Pipeline.Workspace)/variables
            terraform init -var-file=$Env:tfvarsPath
            write-host "plan file is $Env:OUTPUT"
            $plan = $(terraform show -json $Env:OUTPUT | ConvertFrom-Json -AsHashtable)
            $plan
            $actions = $plan.resource_changes.change.actions
            $actions
            $outputChanges = $plan.output_changes
            write-host "Output changes : $outputChanges"
            Write-Host "Terraform actions : $actions"
            if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update') -or ($outputChanges -contains 'create') -or ($outputChanges -contains 'delete') -or ($outputChanges -contains 'update'))
            {
              Write-Host -BackgroundColor DarkRed -foregroundColor Gray "Terraform will perform the following actions : $actions"
              Write-Host -ForegroundColor Red "##vso[task.setvariable variable=planHasChanges;isOutput=true]true"
            } else
            {
              Write-Host -BackgroundColor DarkYellow -foregroundcolor blue "No changes detected in the Terraform plan."
              Write-Host -ForegroundColor Red "##vso[task.setvariable variable=planHasChanges;isOutput=true]false"
            }

    - powershell: |
        write-host "The output variable is set to: $(checkChanges.planHasChanges)"      

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        TargetFolder: '$(build.artifactstagingdirectory)'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact ${{ parameters.environment }}-${{ parameters.artifactSuffix }}'
      inputs:
        ArtifactName: '${{ parameters.environment }}-${{ parameters.artifactSuffix }}'

    - task: CmdLine@2
      name: SetArtifactOutputVar
      displayName: 'Set Artifact Name Output Variable'
      env:
        ARTIFACTNAME: '${{ parameters.environment }}-${{ parameters.artifactSuffix }}'
      inputs:
        workingDirectory: ${{ parameters.workingDirectory }}
        script: |
          echo ##vso[task.setvariable variable=ARTIFACT_NAME;isOutput=true;]$(ARTIFACTNAME)
          echo ${{ variables.ARTIFACT_NAME }}

